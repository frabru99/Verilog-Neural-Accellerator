module acc_pipe(
    input signed [7:0] X1, X2, X3, X4,
    output signed [7:0] Y,
    output signed ready, valid_out,
    input valid, ready_out,
    input clk, arst
);

    wire signed [7:0] Y1, Y2, Y3;

    // Parameters for N1
    parameter [7:0] n1_w1 = -8'd115;
    parameter [7:0] n1_w2 = 8'd1;
    parameter [7:0] n1_w3 = -8'd105;
    parameter [7:0] n1_w4 = 8'd16;
    parameter [15:0] n1_bias = 16'd12571;
    parameter [11:0] n1_xmin = -12'd127;
    parameter [11:0] n1_xmax = 12'd127;

    // Parameters for N2
    parameter [7:0] n2_w1 = 8'd103;
    parameter [7:0] n2_w2 = -8'd22;
    parameter [7:0] n2_w3 = 8'd32;
    parameter [7:0] n2_w4 = -8'd56;
    parameter [15:0] n2_bias = -16'd8139;
    parameter [11:0] n2_xmin = -12'd127;
    parameter [11:0] n2_xmax = 12'd127;

    // Parameters for N3
    parameter [7:0] n3_w1 = 8'd75;
    parameter [7:0] n3_w2 = -8'd85;
    parameter [7:0] n3_w3 = -8'd38;
    parameter [7:0] n3_w4 = 8'd92;
    parameter [15:0] n3_bias = 16'd10182;
    parameter [11:0] n3_xmin = -12'd127;
    parameter [11:0] n3_xmax = 12'd127;

    // Define FSM states
    parameter [2:0] EMPTY_REGISTERS = 3'b000;
    parameter [2:0] FIRST_STAGE_FULL = 3'b001;
    parameter [2:0] SECOND_STAGE_FULL = 3'b010;
    parameter [2:0] PIPE_FULL_RESULT_UNREAD = 3'b011;
    parameter [2:0] PIPE_FULL_RESULT_READ = 3'b100;

    // Define state signal
    reg [2:0] state;

    // Define enable signals
    reg enable1, enable2, enable3;

    // Instantiate neurons and registers
    neuron n1(.X1(X1), .X2(X2), .X3(X3), .X4(X4), .W1(n1_w1), .W2(n1_w2), .W3(n1_w3), .W4(n1_w4), .bias(n1_bias), .xmin(n1_xmin), .xmax(n1_xmax), .Y(Y1));
    neuron n2(.X1(X1), .X2(X2), .X3(X3), .X4(X4), .W1(n2_w1), .W2(n2_w2), .W3(n2_w3), .W4(n2_w4), .bias(n2_bias), .xmin(n2_xmin), .xmax(n2_xmax), .Y(Y2));
    neuron n3(.X1(Y1), .X2(Y2), .X3(8'b0), .X4(8'b0), .W1(n3_w1), .W2(n3_w2), .W3(n3_w3), .W4(n3_w4), .bias(n3_bias), .xmin(n3_xmin), .xmax(n3_xmax), .Y(Y3));

    register REG1(.clk(clk), .arst(arst), .Y(Y1), .S(S1), .enable(enable1));
    register REG2(.clk(clk), .arst(arst), .Y(Y2), .S(S2), .enable(enable2));
    register REG3(.clk(clk), .arst(arst), .Y(Y3), .S(Y), .enable(enable3));

    // FSM logic
    always @(posedge clk or posedge arst) begin
        if (arst)
            state <= EMPTY_REGISTERS;
        else
            case (state)
                EMPTY_REGISTERS: begin
                    if (valid)
                        state <= FIRST_STAGE_FULL;
                    else
                        state <= EMPTY_REGISTERS;
                end
                FIRST_STAGE_FULL: begin
                    if (!valid)
                        state <= SECOND_STAGE_FULL;
                    else if (valid)
                        state <= PIPE_FULL_RESULT_UNREAD;
                    else
                        state <= FIRST_STAGE_FULL;
                end
                SECOND_STAGE_FULL: begin
                    if (valid)
                        state <= PIPE_FULL_RESULT_UNREAD;
                    else
                        state <= SECOND_STAGE_FULL;
                end
                PIPE_FULL_RESULT_UNREAD: begin
                    if (ready_out)
                        state <= PIPE_FULL_RESULT_READ;
                    else if (!valid && !ready_out)
                        state <= SECOND_STAGE_FULL;
                    else
                        state <= PIPE_FULL_RESULT_UNREAD;
                end
                PIPE_FULL_RESULT_READ: begin
                    if (!valid)
                        state <= EMPTY_REGISTERS;
                    else if (valid)
                        state <= FIRST_STAGE_FULL;
                    else
                        state <= PIPE_FULL_RESULT_READ;
                end
                default: state <= EMPTY_REGISTERS;
            endcase
    end

    // Output control logic
    always @ (state) begin
        case (state)
            EMPTY_REGISTERS: begin
                valid_out <= 1'b0;
                ready <= 1'b1;
                enable1 <= 1'b1;
                enable2 <= 1'b1;
                enable3 <= 1'b0;
            end
            FIRST_STAGE_FULL: begin
                valid_out <= 1'b0;
                ready <= 1'b0;
                enable1 <= 1'b0;
                enable2 <= 1'b0;
                enable3 <= 1'b1;
            end
            SECOND_STAGE_FULL: begin
                valid_out <= 1'b1;
                ready <= 1'b1;
                enable1 <= 1'b1;
                enable2 <= 1'b1;
                enable3 <= 1'b0;
            end
            PIPE_FULL_RESULT_UNREAD: begin
                valid_out <= 1'b1;
                ready <= 1'b0;
                enable1 <= 1'b0;
                enable2 <= 1'b0;
                enable3 <= 1'b0;
            end
            PIPE_FULL_RESULT_READ: begin
                valid_out <= 1'b0;
                ready <= 1'b1;
                enable1 <= 1'b1;
                enable2 <= 1'b1;
                enable3 <= 1'b1;
            end
            default: begin
                valid_out <= 1'b0;
                ready <= 1'b0;
                enable1 <= 1'b0;
                enable2 <= 1'b0;
                enable3 <= 1'b0;
            end
        endcase
    end
endmodule

// Register module
module register(
    input signed [7:0] Y,
    output reg signed [7:0] S,
    input enable, clk, arst
);

    always @ (posedge clk or posedge arst) begin
        if (arst)
            S <= 8'b0;
        else if (enable)
            S <= Y;
        else
            S <= S;
    end

endmodule
